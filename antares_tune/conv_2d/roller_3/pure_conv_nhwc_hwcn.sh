# COMPUTE_V1='- N, C, F = 128, 1024, 384; HI = WI = 42; KW = KH = 1; SH = SW = 1; PH = PW = 0; HO = (HI - KH + PH * 2) // SH + 1; WO = (WI - KW + PW * 2) // SW + 1; einstein_v2(f"temp0[I, K] = input0[I / alter(`HOWO:{HO * WO}`), (I / alter(`WO:{WO}`) % alter(`HO:{HO}`) * alter(`SH:{SH}`) + K / alter(`KWC:{KW * C}`) - alter(`PH:{PH}`)), (I % alter(`WO:{WO}`) * alter(`SW:{SW}`) + K / alter(`C:{C}`) % alter(`KW:{KW}`) - alter(`PW:{PW}`)), K % alter(`C:{C}`)].when([I / alter(`WO:{WO}`) % alter(`HO:{HO}`) * alter(`SH:{SH}`) + K / alter(`KWC:{KW * C}`) - alter(`PH:{PH}`) >= 0, I / alter(`WO:{WO}`) % alter(`HO:{HO}`) * alter(`SH:{SH}`) + K / alter(`KWC:{KW * C}`) - alter(`PH:{PH}`) < alter(`HI:{HI}`), I % alter(`WO:{WO}`) * alter(`SW:{SW}`) + K / alter(`C:{C}`) % alter(`KW:{KW}`) - alter(`PW:{PW}`) >= 0, I % alter(`WO:{WO}`) * alter(`SW:{SW}`) + K / alter(`C:{C}`) % alter(`KW:{KW}`) - alter(`PW:{PW}`) < alter(`WI:{WI}`)], const(0.0).cast(`float16`)) where I in I:{N * HO * WO}, K in K:{KH * KW * C}; output0[I, J] += temp0[I, K] * input1[J, K]", { "input0": {"dtype": "float16", "shape": [f"N:{N}", f"HI:{HI}", f"WI:{WI}", f"C:{C}"]}, "input1": {"dtype": "float16", "shape": [f"F:{F}", f"K:{KH * KW * C}"]}})' antares

COMPUTE_V1='- _N, _CI, _H, _W, _CO, _KH, _KW, _SH, _SW, _PH, _PW = 128, 1024, 42, 42, 384, 1, 1, 1, 1, 0, 0;_HO, _WO = (_H - _KH + _PH * 2) // _SH + 1, (_W - _KW + _PW * 2) // _SW + 1;_PHI, _PWI = _H + _PH * 2, _W + _PW * 2; _GM, _GN, _GK = _N * _HO * _WO, _CO, _CI * _KH * _KW; einstein_v2(f"temp0[N, PHI, PWI, C] = input0[N, -{_PH} + PHI, -{_PW} + PWI, C].when([-{_PH} + PHI >= 0, -{_PH} + PHI < {_H}, -{_PW} + PWI >= 0, -{_PW} + PWI < {_W}], const(0.0).cast(`float16`)) where PHI in {_PHI}, PWI in {_PWI};temp1[GM, GK] = temp0[GM // ({_HO} * {_WO}), {_SH} * ((GM % ({_HO} * {_WO})) // {_WO}) + (GK // {_CI}) // {_KW}, {_SW} * ((GM % ({_HO} * {_WO})) % {_WO}) + (GK // {_CI}) % {_KW}, GK % {_CI}] where GM in {_GM}, GK in {_GK};output0[GM, GN] += temp1[GM, GK] * input1[GN, GK]", input_dict={"input0": {"dtype": "float16", "shape": [_N, _H, _W, _CI]}, "input1": {"dtype": "float16", "shape": [_CO, _KH * _KW * _CI]}})' antares 

# COMPUTE_V1='- _N, _CI, _H, _W, _CO, _KH, _KW, _SH, _SW, _PH, _PW = 128, 1024, 42, 42, 384, 1, 1, 1, 1, 0, 0;_HO, _WO = (_H - _KH + _PH * 2) // _SH + 1, (_W - _KW + _PW * 2) // _SW + 1;_PHI, _PWI = _H + _PH * 2, _W + _PW * 2; _GM, _GN, _GK = _N * _HO * _WO, _CO, _CI * _KH * _KW; einstein_v2(f"temp0[N, PHI, PWI, C] = input0[N, -{_PH} + PHI, -{_PW} + PWI, C].when([-{_PH} + PHI >= 0, -{_PH} + PHI < {_H}, -{_PW} + PWI >= 0, -{_PW} + PWI < {_W}], const(0.0).cast(`float16`)) where PHI in {_PHI}, PWI in {_PWI};temp1[GM, GK] = temp0[GM // ({_HO} * {_WO}), {_SH} * ((GM // {_WO}) % {_HO}) + (GK // ({_CI} * {_KW})), {_SW} * (GM % {_WO}) + (GK // {_CI}) % {_KW}, GK % {_CI}] where GM in {_GM}, GK in {_GK};output0[GM, GN] += temp1[GM, GK] * input1[GN, GK]", input_dict={"input0": {"dtype": "float16", "shape": [_N, _H, _W, _CI]}, "input1": {"dtype": "float16", "shape": [_CO, _KH * _KW * _CI]}})' antares

# [I/(HO*WO), ((I / WO) % HO) * SH + K / (CIN * KW) - PH, (I % WO) * SW + K / (CIN) % KW - PW, K % (CIN)]

