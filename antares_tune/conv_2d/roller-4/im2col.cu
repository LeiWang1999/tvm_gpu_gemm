// GLOBALS: input0:float16[128, 42, 42, 1024] -> temp1:float16[225792, 1024]
// BACKEND: c-cuda (default)
// CONFIG: {"Ftemp1:D0": [-1, 16, 2, 1], "Ftemp1:D1": [-1, 8, 16, 2], "Ftemp1:O": [1, 0], "Ftemp1:S": 4, "Ftemp1:R": 1}
// COMPUTE_V1: - _N, _CI, _H, _W, _CO, _KH, _KW, _SH, _SW, _PH, _PW = 128, 1024, 42, 42, 384, 1, 1, 1, 1, 0, 0;_HO, _WO = (_H - _KH + _PH * 2) // _SH + 1, (_W - _KW + _PW * 2) // _SW + 1;_PHI, _PWI = _H + _PH * 2, _W + _PW * 2; _GM, _GN, _GK = _N * _HO * _WO, _CO, _CI * _KH * _KW; einstein_v2(f"temp0[N, PHI, PWI, C] = input0[N, -{_PH} + PHI, -{_PW} + PWI, C].when([-{_PH} + PHI >= 0, -{_PH} + PHI < {_H}, -{_PW} + PWI >= 0, -{_PW} + PWI < {_W}], const(0.0).cast(`float16`)) where PHI in {_PHI}, PWI in {_PWI};temp1[GM, GK] = temp0[GM // ({_HO} * {_WO}), {_SH} * ((GM % ({_HO} * {_WO})) // {_WO}) + (GK // {_CI}) // {_KW}, {_SW} * ((GM % ({_HO} * {_WO})) % {_WO}) + (GK // {_CI}) % {_KW}, GK % {_CI}] where GM in {_GM}, GK in {_GK}", input_dict={"input0": {"dtype": "float16", "shape": [_N, _H, _W, _CI]}})


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float16[128, 42, 42, 1024] -> temp1:float16[225792, 1024]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#if (__CUDA_ARCH__ >= 600)
__forceinline__ __device__ __half hmax(const __half &a, const __half &b) { return a > b ? a : b; }
__forceinline__ __device__ __half hmin(const __half &a, const __half &b) { return a < b ? a : b; }
#endif

#endif


extern "C" __global__ __launch_bounds__(32) void template_op_kernel0(half* __restrict__ input0, half* __restrict__ temp1) {
  // [thread_extent] blockIdx.x = 7056
  // [thread_extent] threadIdx.x = 2
  // [thread_extent] blockIdx.y = 4
  // [thread_extent] threadIdx.y = 16
  for (int vthread_s = 0; vthread_s < 16; ++vthread_s) {
    temp1[((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)))] = input0[((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 1))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 1))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 32))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 32))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 33))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 33))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 64))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 64))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 65))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 65))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 96))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 96))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 97))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 97))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 128))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 128))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 129))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 129))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 160))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 160))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 161))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 161))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 192))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 192))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 193))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 193))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 224))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 224))];
    temp1[(((((((((int)blockIdx.x) * 32768) + (vthread_s * 2048)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 225))] = input0[(((((((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) / 1764) * 1806336) + ((((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 1764) / 42) * 43008)) + (((((((int)blockIdx.x) * 32) + (vthread_s * 2)) + ((int)threadIdx.x)) % 42) * 1024)) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 2)) + 225))];
  }
}

// Saved Perf = 1.120810e-03 sec / run; Step Produced = 284; Planned Steps = 1000;